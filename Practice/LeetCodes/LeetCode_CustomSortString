class Solution:
    def customSortString(self, order: str, s: str) -> str:
        count = {}
        for char in s:
            if char in count:
                count[char] += 1
            else:
                count[char] = 1
                
                
        result = []
        
        for char in order:
            if char in count:
                result.append(char * count[char])
                del count[char]
                
                
        for char in count:
            result.append(char * count[char])
            
            
        return ''.join(result)

solution = Solution()
order = "cba"
s = "abcd"

print(solution.customSortString(order, s))
            

# Another way to solve this
class Solution:
    def customSortString(self, order: str, s: str) -> str:
        # Create a mapping from character to its position in `order`
        order_index = {char: idx for idx, char in enumerate(order)}
        
        # Sort `s` using the custom order defined by `order_index`
        sorted_s = sorted(s, key=lambda char: order_index.get(char, len(order)))
        
        return ''.join(sorted_s)

# Example usage:
solution = Solution()
order = "cba"
s = "abcd"
print(solution.customSortString(order, s))  # Output: "cbad" (or any valid permutation like "dcba", "cdba", "cbda")